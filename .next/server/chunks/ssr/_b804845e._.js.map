{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/node/selink/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\ninterface LinkMetadata {\n  thumbnailUrl: string | null;\n  pageTitle: string | null;\n  faviconUrl: string | null;\n}\n\nasync function getHtml(url: string): Promise<string | null> {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'Accept': 'text/html',\n      },\n    });\n    if (!response.ok) {\n      console.error(`Failed to fetch URL: ${url}, status: ${response.status}`);\n      return null;\n    }\n    return await response.text();\n  } catch (error) {\n    console.error(`Error fetching URL ${url}:`, error);\n    return null;\n  }\n}\n\nfunction getAttributeValue(attributesString: string, attributeName: string): string | null {\n  const regex = new RegExp(`${attributeName}\\\\s*=\\\\s*[\"']([^\"']+)[\"']`, 'i');\n  const match = attributesString.match(regex);\n  return match ? match[1] : null;\n}\n\nfunction extractPreviewImageUrl(html: string, baseUrl: string): string | null {\n  const metaTagMatches = html.matchAll(/<meta\\s+([^>]+)>/gi);\n  let ogImage: string | null = null;\n  let twitterImage: string | null = null;\n\n  for (const match of metaTagMatches) {\n    const attrsString = match[1];\n    const property = getAttributeValue(attrsString, 'property');\n    const name = getAttributeValue(attrsString, 'name');\n    const content = getAttributeValue(attrsString, 'content');\n\n    if (content) {\n      if (property === 'og:image' || name === 'og:image') {\n        ogImage = content;\n      }\n      if (property === 'twitter:image' || name === 'twitter:image') {\n        twitterImage = content;\n      }\n    }\n  }\n\n  let imageUrl = ogImage || twitterImage;\n\n  if (imageUrl) {\n    try {\n      const absoluteUrl = new URL(imageUrl, baseUrl).href;\n      new URL(absoluteUrl); \n      return absoluteUrl;\n    } catch (e) {\n      console.warn(`Invalid or unresolvable preview image URL found: ${imageUrl} with base ${baseUrl}`);\n      return null;\n    }\n  }\n  return null;\n}\n\nfunction simpleHtmlEntityDecode(text: string): string {\n  return text\n    .replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&quot;/g, '\"')\n    .replace(/&#0*39;/g, \"'\")\n    .replace(/&apos;/g, \"'\")\n    .replace(/&nbsp;/g, ' ');\n}\n\nfunction extractPageTitle(html: string): string | null {\n  const titleRegex = /<title[^>]*>(.*?)<\\/title>/i;\n  const match = html.match(titleRegex);\n  if (match && match[1]) {\n    let titleText = match[1];\n    titleText = simpleHtmlEntityDecode(titleText);\n    return titleText.trim() || null;\n  }\n  return null;\n}\n\nfunction extractFaviconUrl(html: string, baseUrl: string): string | null {\n  const linkTagMatches = html.matchAll(/<link\\s+([^>]+)>/gi);\n  const potentialFavicons: { href: string; rel: string; type?: string; sizes?: string }[] = [];\n\n  for (const match of linkTagMatches) {\n    const attrsString = match[1];\n    const href = getAttributeValue(attrsString, 'href');\n    const rel = getAttributeValue(attrsString, 'rel');\n    \n    if (href && rel) {\n      const lowerRel = rel.toLowerCase();\n      if (['icon', 'shortcut icon', 'apple-touch-icon'].includes(lowerRel)) {\n        potentialFavicons.push({\n          href: href,\n          rel: lowerRel,\n          type: getAttributeValue(attrsString, 'type')?.toLowerCase(),\n          sizes: getAttributeValue(attrsString, 'sizes'),\n        });\n      }\n    }\n  }\n  \n  const sortedFavicons = potentialFavicons.sort((a, b) => {\n    const priority = (pf: { rel: string; type?: string; sizes?: string }) => {\n      if (pf.rel === 'icon' && pf.type === 'image/svg+xml') return 1;\n      if (pf.rel === 'icon' && pf.type === 'image/png' && pf.sizes && (pf.sizes.includes('32x32') || pf.sizes.includes('64x64'))) return 2;\n      if (pf.rel === 'icon' && pf.type === 'image/png') return 3;\n      if (pf.rel === 'icon') return 4; \n      if (pf.rel === 'shortcut icon') return 5; \n      if (pf.rel === 'apple-touch-icon') return 6;\n      return 7;\n    };\n    return priority(a) - priority(b);\n  });\n\n  if (sortedFavicons.length > 0) {\n    for (const fav of sortedFavicons) {\n      try {\n        const absoluteUrl = new URL(fav.href, baseUrl).href;\n        new URL(absoluteUrl); \n        return absoluteUrl;\n      } catch (e) {\n        // Try next potential favicon if current one is invalid\n      }\n    }\n    console.warn(`All potential favicon hrefs were invalid or unresolvable for base ${baseUrl}`);\n  }\n  return null;\n}\n\n\nexport async function getLinkMetadata(url: string): Promise<LinkMetadata> {\n  const defaultMetadata: LinkMetadata = {\n    thumbnailUrl: null,\n    pageTitle: null,\n    faviconUrl: null,\n  };\n\n  if (!url) return defaultMetadata;\n\n  let normalizedUrl = url;\n  if (!normalizedUrl.startsWith('http://') && !normalizedUrl.startsWith('https://')) {\n    normalizedUrl = `https://${normalizedUrl}`;\n  }\n  \n  try {\n      new URL(normalizedUrl); \n  } catch (e) {\n      console.warn(`Invalid URL provided to getLinkMetadata after normalization: ${url}`);\n      throw new Error(\"The provided URL is invalid. Please enter a valid URL (e.g., https://example.com).\");\n  }\n\n  const html = await getHtml(normalizedUrl);\n  if (!html) {\n    // If HTML can't be fetched, return default metadata, perhaps with a more specific title\n    return { ...defaultMetadata, pageTitle: normalizedUrl };\n  }\n\n  let thumbnailUrl: string | null = extractPreviewImageUrl(html, normalizedUrl);\n  if (thumbnailUrl) {\n    try {\n      new URL(thumbnailUrl); \n    } catch (e) {\n      console.warn(`Invalid thumbnail URL extracted: ${thumbnailUrl}. Setting thumbnail to null.`);\n      thumbnailUrl = null; \n    }\n  }\n\n  const pageTitle = extractPageTitle(html);\n  \n  // This list would ideally come from next.config.js or a shared utility if it needs to be strictly enforced\n  // For favicons with <img> tag, we might not need to be as strict as next/image.\n  // However, to be consistent with the old \"RegisteredHostnamesDialog\", we keep a list here.\n  const registeredHostnamesForFavicon = [ \n    'placehold.co', 'i.ytimg.com', 'cdn.dribbble.com', 'media.cnn.com', \n    'akcdn.detik.net.id', 'awsimages.detik.net.id', 'cdn0-production-images-kly.akamaized.net', \n    'ichef.bbci.co.uk', 'cdn.prod.website-files.com', 'animateai.pro', 'siteforge.io', \n    'pebblely.com', 'yastatic.net', 'v0chat.vercel.sh', 's.pinimg.com', 's2.coinmarketcap.com', \n    'preview-kly.akamaized.net', 'cdn1-production-images-kly.akamaized.net', \n    'sc.cnbcfm.com', 'cdn.cnnindonesia.com', 'www.youtube.com', 'huggingface.co', \n    'github.githubassets.com', 'cdn.oaistatic.com', 'flathub.org', 'spaceberry.studio', \n    'upload.wikimedia.org', 'img.alicdn.com', 'cdn.usegalileo.ai', 'www.deepl.com', \n    'i.pinimg.com', 'd2.alternativeto.net', 'osmo.b-cdn.net', 'framerusercontent.com', \n    'animejs.com', 'peoplesgdarchive.org', 'www.notion.so', 'arc.net', 'lawsofux.com', \n    'naruto-official.com', 'www.apple.com', 'avatars.githubusercontent.com', \n    'assets.bibit.id', 'images.bareksa.com', 'code.visualstudio.com'\n  ].sort();\n\n  let faviconUrl: string | null = extractFaviconUrl(html, normalizedUrl);\n  if (faviconUrl) {\n    try {\n      const faviconHostname = new URL(faviconUrl).hostname;\n      if (!registeredHostnamesForFavicon.includes(faviconHostname)) {\n        console.warn(`Favicon hostname ${faviconHostname} not registered for favicon. Clearing favicon.`);\n        faviconUrl = null;\n      }\n    } catch (e) {\n      console.warn(`Invalid favicon URL ${faviconUrl}. Clearing favicon.`);\n      faviconUrl = null;\n    }\n  }\n\n  return {\n    thumbnailUrl: thumbnailUrl,\n    pageTitle: pageTitle,\n    faviconUrl: faviconUrl,\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file://C%3A/node/selink/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file://C%3A/node/selink/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}